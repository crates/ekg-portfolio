{"ast":null,"code":"var _jsxFileName = \"/Users/elliot/Desktop/Projects/portfolio/src/components/ProjectsGrid.js\";\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport ProjectCard from './ProjectCard';\nimport ReactLogo from '../assets/images/react-logo.png';\n\nclass ProjectsGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [{\n        id: 0,\n        title: 'Project 1',\n        description: 'This is sample text',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '/',\n        selected: false\n      }, {\n        id: 1,\n        title: 'Project 2',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '/',\n        selected: false\n      }, {\n        id: 2,\n        title: 'Project 3',\n        description: 'This will say something about this project',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        selected: false\n      }, {\n        id: 3,\n        title: 'Project 4',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }, {\n        id: 4,\n        title: 'Project 5',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }, {\n        id: 5,\n        title: 'Project 6',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }, {\n        id: 6,\n        title: 'Project 7',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }, {\n        id: 7,\n        title: 'Project 8',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }, {\n        id: 8,\n        title: 'Project 9',\n        description: 'This is a fake description',\n        imgSrc: ReactLogo,\n        gitLink: '',\n        demoLink: '',\n        selected: false\n      }]\n    };\n  }\n\n  chunk(items) {\n    const chunked = [];\n\n    while (items.length) {\n      chunked.push(items.splice(0, 3));\n    }\n\n    return chunked;\n  }\n\n  makeItems(items) {\n    const gridItems = this.chunk(items);\n    const rows = [];\n\n    for (let i = 0; i < gridItems.length; i++) {\n      rows.push([...gridItems[i]]);\n    }\n\n    let incr = 0;\n    const mappedRows = rows.map(row => {\n      incr++;\n      return React.createElement(Row, {\n        key: incr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, row.map(item => React.createElement(ProjectCard, {\n        item: item,\n        title: item.title,\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })));\n    });\n    return mappedRows;\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(CardDeck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.makeItems(this.state.items)));\n  }\n\n}\n\nexport default ProjectsGrid;","map":{"version":3,"sources":["/Users/elliot/Desktop/Projects/portfolio/src/components/ProjectsGrid.js"],"names":["React","Container","Row","CardDeck","ProjectCard","ReactLogo","ProjectsGrid","Component","constructor","props","state","items","id","title","description","imgSrc","gitLink","demoLink","selected","chunk","chunked","length","push","splice","makeItems","gridItems","rows","i","incr","mappedRows","map","row","item","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport ProjectCard from './ProjectCard';\n\nimport ReactLogo from '../assets/images/react-logo.png';\n\nclass ProjectsGrid extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      items: [\n        {\n          id: 0,\n          title: 'Project 1',\n          description: 'This is sample text',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '/',\n          selected: false\n        },\n        {\n          id: 1,\n          title: 'Project 2',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '/',\n          selected: false\n        },\n        {\n          id: 2,\n          title: 'Project 3',\n          description: 'This will say something about this project',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          selected: false\n        },\n        {\n          id: 3,\n          title: 'Project 4',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        },\n        {\n          id: 4,\n          title: 'Project 5',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        },\n        {\n          id: 5,\n          title: 'Project 6',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        },\n        {\n          id: 6,\n          title: 'Project 7',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        },\n        {\n          id: 7,\n          title: 'Project 8',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        },\n        {\n          id: 8,\n          title: 'Project 9',\n          description: 'This is a fake description',\n          imgSrc: ReactLogo,\n          gitLink: '',\n          demoLink: '',\n          selected: false\n        }\n      ]\n    };\n  }\n\n  chunk (items) {\n    const chunked = [];\n\n    while (items.length) {\n      chunked.push(items.splice(0, 3));\n    }\n\n    return chunked;\n  }\n\n  makeItems (items) {\n    const gridItems = this.chunk(items);\n    const rows = [];\n\n    for (let i = 0; i < gridItems.length; i++) {\n      rows.push([...gridItems[i]]);\n    }\n\n    let incr = 0;\n    const mappedRows = rows.map(row => {\n      incr++;\n      return <Row key={incr}>\n        {row.map(item => <ProjectCard item={item} title={item.title} key={item.id} />)}\n      </Row>;\n    });\n\n    return mappedRows;\n  }\n\n  render () {\n    return (\n      <Container>\n        <CardDeck>\n          {this.makeItems(this.state.items)}\n        </CardDeck>\n      </Container>\n    );\n  }\n}\n\nexport default ProjectsGrid;\n"]},"metadata":{},"sourceType":"module"}